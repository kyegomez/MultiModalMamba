{
    "summary": "This code utilizes OpenAI GPT-4 to automate test and documentation generation for classes or functions, efficiently extracting Markdown code in parallel threads.",
    "details": [
        {
            "comment": "This code imports necessary modules and classes, sets up an OpenAI API instance for communication with GPT-4, and defines a function to extract code from Markdown content. The purpose is to automate the generation of tests and documentation for classes or functions by importing them, leading to faster testing and more time to focus on code logic.",
            "location": "\"/media/root/Prima/works/MultiModalMamba/docs/src/scripts/auto_tests_docs/auto_tests.py\":0-34",
            "content": "import inspect\nimport os\nimport re\nimport threading\nfrom swarms import OpenAIChat\nfrom scripts.auto_tests_docs.docs import TEST_WRITER_SOP_PROMPT\n# Import all classes from zeta.structs\n# Tests will be automatically generated in the tests folder using parallized gpt4 with each of the file logic handled autonomously thus\n# leading to a much faster testing process where you just import your classes or functions and tests are automatically generated\n# Automating tests and documentation frees up atleast 75% of your time to focus on the actual logic of your code\nfrom zeta.nn.modules.triple_skip import TripleSkipBlock\nfrom zeta.nn.modules.dynamic_routing_block import DynamicRoutingBlock\nfrom zeta.nn.modules.gated_residual_block import GatedResidualBlock\nfrom zeta.nn.modules.stochastic_depth import StochasticSkipBlocK\n####################\nfrom dotenv import load_dotenv\nload_dotenv()\napi_key = os.getenv(\"OPENAI_API_KEY\")\nmodel = OpenAIChat(\n    model_name=\"gpt-4\",\n    openai_api_key=api_key,\n    max_tokens=500,\n)\ndef extract_code_from_markdown(markdown_content: str):"
        },
        {
            "comment": "The code snippet is a function that extracts and concatenates code blocks from a Markdown string, and another function that processes the documentation of a class using an OpenAI model and saves it in a Python file.",
            "location": "\"/media/root/Prima/works/MultiModalMamba/docs/src/scripts/auto_tests_docs/auto_tests.py\":35-66",
            "content": "    \"\"\"\n    Extracts code blocks from a Markdown string and returns them as a single string.\n    Args:\n    - markdown_content (str): The Markdown content as a string.\n    Returns:\n    - str: A single string containing all the code blocks separated by newlines.\n    \"\"\"\n    # Regular expression for fenced code blocks\n    pattern = r\"```(?:\\w+\\n)?(.*?)```\"\n    matches = re.findall(pattern, markdown_content, re.DOTALL)\n    # Concatenate all code blocks separated by newlines\n    return \"\\n\".join(code.strip() for code in matches)\ndef create_test(cls):\n    \"\"\"\n    Process the documentation for a given class using OpenAI model and save it in a Python file.\n    \"\"\"\n    doc = inspect.getdoc(cls)\n    source = inspect.getsource(cls)\n    input_content = (\n        \"Class Name:\"\n        f\" {cls.__name__}\\n\\nDocumentation:\\n{doc}\\n\\nSource\"\n        f\" Code:\\n{source}\"\n    )\n    # Process with OpenAI model (assuming the model's __call__ method takes this input and returns processed content)\n    processed_content = model(\n        TEST_WRITER_SOP_PROMPT("
        },
        {
            "comment": "The code creates test files for various classes (TripleSkipBlock, DynamicRoutingBlock, GatedResidualBlock, StochasticSkipBlocK) in the \"tests/nn/modules\" directory. It generates a separate Python file for each class by extracting the code from Markdown and creating the necessary directories if they don't exist already. The main function runs the test generation in multiple threads to speed up the process.",
            "location": "\"/media/root/Prima/works/MultiModalMamba/docs/src/scripts/auto_tests_docs/auto_tests.py\":67-107",
            "content": "            input_content, \"zeta\", \"zeta.nn.modules\"\n        )\n    )\n    processed_content = extract_code_from_markdown(processed_content)\n    doc_content = f\"{processed_content}\"\n    # Create the directory if it doesn't exist\n    dir_path = \"tests/nn/modules\"\n    os.makedirs(dir_path, exist_ok=True)\n    # Write the processed documentation to a Python file\n    file_path = os.path.join(dir_path, f\"{cls.__name__.lower()}.py\")\n    with open(file_path, \"w\") as file:\n        file.write(doc_content)\n    print(f\"Test generated for {cls.__name__}.\")\ndef main():\n    classes = [\n        TripleSkipBlock,\n        DynamicRoutingBlock,\n        GatedResidualBlock,\n        StochasticSkipBlocK,\n    ]\n    threads = []\n    for cls in classes:\n        thread = threading.Thread(target=create_test, args=(cls,))\n        threads.append(thread)\n        thread.start()\n    # Wait for all threads to complete\n    for thread in threads:\n        thread.join()\n    print(\"Tests generated in 'tests/nn/modules' directory.\")\nif __name__ == \"__main__\":"
        },
        {
            "comment": "The code is calling the main function.",
            "location": "\"/media/root/Prima/works/MultiModalMamba/docs/src/scripts/auto_tests_docs/auto_tests.py\":108-108",
            "content": "    main()"
        }
    ]
}