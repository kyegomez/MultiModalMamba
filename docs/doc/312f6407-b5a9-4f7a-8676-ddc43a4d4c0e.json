{
    "summary": "The code defines a MultiModalMambaBlock test fixture and tests its initialization, forward pass with different fusion methods, and output shape matching input.",
    "details": [
        {
            "comment": "This code defines a MultiModalMambaBlock test fixture and associated test cases. The test_mmblock_initialization function checks if the block instance is of the correct class and that its attributes match the expected values. The test_mmblock_forward function tests the forward pass of the block with different fusion methods (\"mlp\", \"concat\", \"add\", \"visual_expert\").",
            "location": "\"/media/root/Prima/works/MultiModalMamba/docs/src/tests/test_blocks.py\":0-41",
            "content": "import torch\nimport pytest\nfrom mm_mamba.block import MultiModalMambaBlock\n@pytest.fixture\ndef mmblock():\n    return MultiModalMambaBlock(\n        dim=64,\n        depth=5,\n        dropout=0.1,\n        heads=4,\n        d_state=16,\n        image_size=64,\n        patch_size=16,\n        encoder_dim=64,\n        encoder_depth=5,\n        encoder_heads=4,\n        fusion_method=\"mlp\",\n    )\ndef test_mmblock_initialization(mmblock):\n    assert isinstance(mmblock, MultiModalMambaBlock)\n    assert mmblock.dim == 64\n    assert mmblock.depth == 5\n    assert mmblock.dropout == 0.1\n    assert mmblock.heads == 4\n    assert mmblock.d_state == 16\n    assert mmblock.image_size == 64\n    assert mmblock.patch_size == 16\n    assert mmblock.encoder_dim == 64\n    assert mmblock.encoder_depth == 5\n    assert mmblock.encoder_heads == 4\n    assert mmblock.fusion_method == \"mlp\"\n@pytest.mark.parametrize(\n    \"fusion_method\", [\"mlp\", \"concat\", \"add\", \"visual_expert\"]\n)\ndef test_mmblock_forward(mmblock, fusion_method):\n    mmblock.fusion_method = fusion_method"
        },
        {
            "comment": "The code creates two tensors, one for text and one for images, initializes the mmblock function with them, asserts that the output shape matches the input shape of text, and tests if the fusion method used by mmblock is within the given options.",
            "location": "\"/media/root/Prima/works/MultiModalMamba/docs/src/tests/test_blocks.py\":42-55",
            "content": "    text = torch.randn(1, 16, 64)\n    img = torch.randn(1, 3, 64, 64)\n    out = mmblock(text, img)\n    assert out.shape == text.shape\ndef test_mmblock_check_fusion_method(mmblock):\n    mmblock.check_fusion_method()\n    assert mmblock.fusion_method in [\n        \"mlp\",\n        \"concat\",\n        \"add\",\n        \"visual_expert\",\n    ]"
        }
    ]
}