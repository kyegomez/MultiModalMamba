{"_default": {"1": {"path": "/README.md", "hash": "d58676ce31bd7002cf4a5db76a426af3", "title": "Versatile AI Model: MMM"}, "2": {"path": "/README.md:1-6", "hash": "fab3dd2bf9d325f2c1d457f6b55d3f3e", "title": "Efficient Multi-Modal AI with MMM"}, "3": {"path": "/README.md:6-29", "hash": "7eb6cab57a0c2155ad84fbd1c05ef73b", "title": "Installing and Using MMM AI Model"}, "4": {"path": "/README.md:30-56", "hash": "4820a2cc829e7abe8dd7dc6f283f4bf2", "title": "Customizable MultiModal Mamba Block Model"}, "5": {"path": "/README.md:56-72", "hash": "b11b2ded06b9073dad0d673c1173da4c", "title": "Import MMM Model and Create Tensors"}, "6": {"path": "/README.md:73-115", "hash": "7c112c539d3533debc9f3fa4a8bd4f68", "title": "Model Initialization and Prediction Process"}, "7": {"path": "/README.md:115-134", "hash": "6e7ac81eb38b94bb030c2482e4c0e204", "title": "Multi Modal Mamba: Versatile, Powerful AI Framework"}, "8": {"path": "/example.py", "hash": "4493e7d91a222f9f4e2b465638bbd7fd", "title": "MultiModalMambaBlock Model Demo"}, "9": {"path": "/example.py:1-31", "hash": "d119c9f46565a71cef2b62b62f9fa6f8", "title": "Model Initialization and Testing"}, "10": {"path": "/example.py:32-32", "hash": "20d34cf50fc9993a6a50668303e2e3ec", "title": "Output Dimensions of Variable 'out'"}, "11": {"path": "/mm_mamba/__init__.py", "hash": "adee731fd1ce162fa40ac25d75c69d52", "title": "Importing MultiModal Mamba Blocks"}, "12": {"path": "/mm_mamba/block.py", "hash": "3c0b963aa49ba2ff8b95c86e25497532", "title": "MultiModal Mamba Block: Fusion in PyTorch"}, "13": {"path": "/mm_mamba/block.py:1-23", "hash": "f2bbf815237cc83d30f9e7675fe6e885", "title": "Multimodal Fusion Block: Mamba"}, "14": {"path": "/mm_mamba/block.py:25-70", "hash": "476e147fd77a0ed7be128d05ae969be5", "title": "MultiModal Mamba Block: Encoder-Decoder Architecture"}, "15": {"path": "/mm_mamba/block.py:71-104", "hash": "94e85ae91a97a1a7c497abf4aa416e69", "title": "Mamba ViT Model Class"}, "16": {"path": "/mm_mamba/block.py:105-129", "hash": "800731a59316ae82ab85e1ca66c2b306", "title": "Multimodal Fusion in MultiModalMambaBlock"}, "17": {"path": "/mm_mamba/block.py:130-144", "hash": "752e34c0160fb8e00bd76437328b9164", "title": "Fusion Method-Dependent Operations"}, "18": {"path": "/mm_mamba/model.py", "hash": "157e540ca97fc95513304753caa9194e", "title": "Multi-Modal Mamba: Fusing Text and Images"}, "19": {"path": "/mm_mamba/model.py:1-25", "hash": "7c50e2219bccd8560bb1bab34978cd09", "title": "MultiModal Mamba Model Class"}, "20": {"path": "/mm_mamba/model.py:26-67", "hash": "b86450ac5f487bf5e7166e3ad35c6540", "title": "Multi-Modal Model Class: MMM"}, "21": {"path": "/mm_mamba/model.py:68-99", "hash": "04b74973eab997c0c15f409b38475bf4", "title": "MMM Class Initialization and Attributes"}, "22": {"path": "/mm_mamba/model.py:100-140", "hash": "78f7329aed347d97ac2f7d95b7aa9ffb", "title": "Model with MambaBlock and ViTransformerWrapper"}, "23": {"path": "/mm_mamba/model.py:141-171", "hash": "e65be8c452ebba9cf82a4293c4d85fb5", "title": "MultiModal Mamba Model Architecture"}, "24": {"path": "/mm_mamba/model.py:173-202", "hash": "cecf78cc291d52391082834b36c9b6be", "title": "Multimodal Fusion Methods in Model.py"}, "25": {"path": "/mm_mamba/model.py:204-226", "hash": "b5f1c9401191d8c9faf5d234b992c539", "title": "Fused Representation Initialization"}, "26": {"path": "/model_example.py", "hash": "115f34f9f504f1ac100d3693185587ed", "title": "MMM Model Implementation Example"}, "27": {"path": "/pyproject.toml", "hash": "0d96ed9649bb7d304fdfe9e0fb500950", "title": "Configuring MMM-Zeta with Poetry in Pyproject.toml"}, "28": {"path": "/pyproject.toml:1-35", "hash": "7cec0b7a46bb561f7a8607d587863ac5", "title": "Poetry Configuration for mmm-zeta"}, "29": {"path": "/pyproject.toml:36-59", "hash": "e61b6730d2e94f472416565c56f2dc9d", "title": "Configuring Python Dev Tools in Pyproject.toml"}, "30": {"path": "/requirements.txt", "hash": "e67b3e82c334470c1c005d4850034824", "title": "Package Versions for Python Project"}, "31": {"path": "/scripts/auto_tests_docs/auto_docs.py", "hash": "4855433970b67665a93a179deee1ec8f", "title": "AutoDocs: OpenAI-powered Markdown Docs Generator"}, "32": {"path": "/scripts/auto_tests_docs/auto_docs.py:1-41", "hash": "ab3978e5b766db9ea83ec40d24483088", "title": "AI-Generated Markdown Docs from Code"}, "33": {"path": "/scripts/auto_tests_docs/auto_docs.py:42-80", "hash": "45c4cd0ec417d367be9eac05bece4e9e", "title": "Concurrent Class Documentation Generator"}, "34": {"path": "/scripts/auto_tests_docs/auto_docs.py:81-85", "hash": "4dff7a929513c5153369213e1033631b", "title": "Checking Direct Execution and Calling Main Function"}, "35": {"path": "/scripts/auto_tests_docs/auto_docs_functions.py", "hash": "418e4ec9038cd69ad38b1f2bb9256baa", "title": "Auto-Generating Markdown Docs for Functions with OpenAI"}, "36": {"path": "/scripts/auto_tests_docs/auto_docs_functions.py:1-44", "hash": "245e6c1db8c7230aa42f849b82d3501f", "title": "Auto-Generate Markdown Docs with OpenAI"}, "37": {"path": "/scripts/auto_tests_docs/auto_docs_functions.py:45-83", "hash": "c6b949202c11881ed7f3c74884788903", "title": "Parallel Function Documentation Generator"}, "38": {"path": "/scripts/auto_tests_docs/auto_tests.py", "hash": "ab852ca30a82bbdf62b1192328f542d0", "title": "Parallel OpenAI GPT-4 Tests and Docs Automation"}, "39": {"path": "/scripts/auto_tests_docs/auto_tests.py:1-35", "hash": "e6d4c04d3fb5884a421f0b20865fc4fd", "title": "Automate Tests and Docs with GPT-4"}, "40": {"path": "/scripts/auto_tests_docs/auto_tests.py:36-67", "hash": "2dafc7fed4a27faf79ab9f3665e74d08", "title": "Markdown to Python Converter"}, "41": {"path": "/scripts/auto_tests_docs/auto_tests.py:68-108", "hash": "ede19632e6e92e38ccde55c132fa1d4c", "title": "Generate Test Files for Various Neural Network Classes"}, "42": {"path": "/scripts/auto_tests_docs/auto_tests.py:109-109", "hash": "7fc645c74de0e80548024d83a5c6f152", "title": "Main Function Called by Code"}, "43": {"path": "/scripts/auto_tests_docs/auto_tests_functions.py", "hash": "a2a0fefed4c359f0eedbfa7aca2ffdc4", "title": "Automated Testing and Documentation Generation"}, "44": {"path": "/scripts/auto_tests_docs/auto_tests_functions.py:1-46", "hash": "835314578054ed48b48c7068b2661bc0", "title": "Automated Documentation Generation with OpenAI"}, "45": {"path": "/scripts/auto_tests_docs/auto_tests_functions.py:48-84", "hash": "061fe7422c1435fcbab7f576529534ab", "title": "Auto-generating Markdown Docs for Zeta.Utils Functions"}, "46": {"path": "/scripts/auto_tests_docs/docs.py", "hash": "a14dedec8eaf0ebd2295d4d65edeb5c6", "title": "Python Test Docs & Functions"}, "47": {"path": "/scripts/auto_tests_docs/docs.py:1-18", "hash": "f0b709c6d8bc83641e38570694d8ca91", "title": "Automatic Markdown Doc Generator"}, "48": {"path": "/scripts/auto_tests_docs/docs.py:18-32", "hash": "9600c8b17f9952ccc504a4a6c7dfb44a", "title": "Writing Effective Module Documentation"}, "49": {"path": "/scripts/auto_tests_docs/docs.py:33-48", "hash": "d42e3157f8037c7c3009250da52450de", "title": "Documentation Template for Modules/Functions"}, "50": {"path": "/scripts/auto_tests_docs/docs.py:48-60", "hash": "379607be4fae8821ef7d7ce2ef7cd1de", "title": "Multi-Head Attention Module Creation"}, "51": {"path": "/scripts/auto_tests_docs/docs.py:61-73", "hash": "c3fbf4b509e516560cc113835672894e", "title": "Multi-Head Attention Forward Pass"}, "52": {"path": "/scripts/auto_tests_docs/docs.py:74-83", "hash": "945d6a0dc1edd40f285a3cf8296858fc", "title": "Multi-Head Attention Function Signature"}, "53": {"path": "/scripts/auto_tests_docs/docs.py:83-112", "hash": "9c189bbc74aed46b9c40a37d1fc89d1f", "title": "Test Writer SOP Prompt and MultiheadAttention Class"}, "54": {"path": "/scripts/auto_tests_docs/docs.py:112-135", "hash": "3b7e9b64f9c3e1cd75bbfbf994f14b00", "title": "Comprehensive Pytest Testing Guide"}, "55": {"path": "/scripts/auto_tests_docs/docs.py:136-156", "hash": "7f8478e8e89bf3d2461f434cba497bec", "title": "Robust Python Testing: Parametrized, Mocks, Coverage"}, "56": {"path": "/scripts/auto_tests_docs/docs.py:158-178", "hash": "83678a62eac120e1403c9911ac8cccb4", "title": "Optimizing PyTest: Best Practices and Tips"}, "57": {"path": "/scripts/auto_tests_docs/docs.py:179-201", "hash": "c63bfaeaaef3863ce586e13e99c2058a", "title": "Effective Testing Guidelines"}, "58": {"path": "/scripts/auto_tests_docs/mkdocs_handler.py", "hash": "70f8db7d49d75c90dc9e8dc4d22ceed5", "title": "Markdown File List Generator"}, "59": {"path": "/scripts/auto_tests_docs/mkdocs_handler.py:1-27", "hash": "6611740a94351e2ff5fce61f4cfe8752", "title": "Generate MD File List"}, "60": {"path": "/scripts/auto_tests_docs/mkdocs_handler.py:30-31", "hash": "31f5db27b8c711708690a4764dd13de6", "title": "Generate File List from Directory"}, "61": {"path": "/scripts/code_quality.sh", "hash": "a58861de4904ba5fa96db085251838cd", "title": "Automated Code Quality Enhancement"}, "62": {"path": "/scripts/delpycache.py", "hash": "892a5c1e2cf653cfd128dbcd6fb34a41", "title": "Delete PyCache Directories Script"}, "63": {"path": "/scripts/get_package_requirements.py", "hash": "bd688d0b8cfd9eb4031dff8199c6ad34", "title": "Extract Package Requirements"}, "64": {"path": "/scripts/get_package_requirements.py:1-34", "hash": "46b6260c74fd208709d8c749db348050", "title": "Extract Package Requirements"}, "65": {"path": "/scripts/get_package_requirements.py:35-47", "hash": "9d3215fd9dd2c56a09d92dd7359fa003", "title": "Fetch Package Versions"}, "66": {"path": "/scripts/requirementstxt_to_pyproject.py", "hash": "abfacbc05f92e01f0d05a1e9cc30b2be", "title": "Efficient Pyproject Updater"}, "67": {"path": "/scripts/requirementstxt_to_pyproject.py:1-36", "hash": "4a7a2a048c326dd3475f2f6d4ff7b9e4", "title": "Update Pyproject Dependencies"}, "68": {"path": "/scripts/requirementstxt_to_pyproject.py:39-40", "hash": "d98f06dba11ea2edcda461f6f76ef647", "title": "Update pyproject.toml with Ease"}, "69": {"path": "/scripts/test_name.sh", "hash": "e18137aa32f3fcdb76cc322cd3623b3b", "title": "Rename Python Tests with Prefix"}, "70": {"path": "/scripts/tests.sh", "hash": "ee7f7af2093bdaecb83a41c8965a2086", "title": "Automated Python Tests with scripts/tests.sh"}, "71": {"path": "/tests/test_benchmarks.py", "hash": "40fadab9584bd54f79cc962d1e9457e9", "title": "Benchmarking MambaBlock and gpt4 Transformer"}, "72": {"path": "/tests/test_benchmarks.py:1-40", "hash": "470d7cb9bbc7a50cc73f83800e08298f", "title": "Benchmarking MambaBlock and GPT4 Transformer"}, "73": {"path": "/tests/test_benchmarks.py:41-41", "hash": "2c48cf94a557f5b031d0e3e2b855e32e", "title": "Time Difference Calculator"}, "74": {"path": "/tests/test_blocks.py", "hash": "cc3ce16a26472a8382cf28d293700bda", "title": "MultiModal Mamba Block Testing"}, "75": {"path": "/tests/test_blocks.py:1-42", "hash": "bf226ab98090058af3847459a85c8ace", "title": "MultiModalMambaBlock Testing"}, "76": {"path": "/tests/test_blocks.py:43-56", "hash": "384b09710ba70adcd255ca2d28ccaeb2", "title": "Testing mmblock fusion methods"}, "77": {"path": "/tests/test_model.py", "hash": "3fc1b5cf0b28922a4c5b8895723f1320", "title": "MMM Model Test Fixture"}, "78": {"path": "/tests/test_model.py:1-46", "hash": "05cdf3efb175698d2f4960d35b6a37d3", "title": "Testing MMM Model Initialization and Forward Pass"}, "79": {"path": "/tests/test_model.py:49-84", "hash": "ff5412adb277bf825c7a9f196562c800", "title": "Testing MultiModal Mamba Model Fusion Methods"}}}