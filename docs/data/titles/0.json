{
    "/README.md": "Versatile AI Model: MMM",
    "/README.md:1-6": "Efficient Multi-Modal AI with MMM",
    "/README.md:115-134": "Multi Modal Mamba: Versatile, Powerful AI Framework",
    "/README.md:30-56": "Customizable MultiModal Mamba Block Model",
    "/README.md:56-72": "Import MMM Model and Create Tensors",
    "/README.md:6-29": "Installing and Using MMM AI Model",
    "/README.md:73-115": "Model Initialization and Prediction Process",
    "/example.py": "MultiModalMambaBlock Model Demo",
    "/example.py:1-31": "Model Initialization and Testing",
    "/example.py:32-32": "Output Dimensions of Variable 'out'",
    "/mm_mamba/__init__.py": "Importing MultiModal Mamba Blocks",
    "/mm_mamba/block.py": "MultiModal Mamba Block: Fusion in PyTorch",
    "/mm_mamba/block.py:1-23": "Multimodal Fusion Block: Mamba",
    "/mm_mamba/block.py:105-129": "Multimodal Fusion in MultiModalMambaBlock",
    "/mm_mamba/block.py:130-144": "Fusion Method-Dependent Operations",
    "/mm_mamba/block.py:25-70": "MultiModal Mamba Block: Encoder-Decoder Architecture",
    "/mm_mamba/block.py:71-104": "Mamba ViT Model Class",
    "/mm_mamba/model.py": "Multi-Modal Mamba: Fusing Text and Images",
    "/mm_mamba/model.py:1-25": "MultiModal Mamba Model Class",
    "/mm_mamba/model.py:100-140": "Model with MambaBlock and ViTransformerWrapper",
    "/mm_mamba/model.py:141-171": "MultiModal Mamba Model Architecture",
    "/mm_mamba/model.py:173-202": "Multimodal Fusion Methods in Model.py",
    "/mm_mamba/model.py:204-226": "Fused Representation Initialization",
    "/mm_mamba/model.py:26-67": "Multi-Modal Model Class: MMM",
    "/mm_mamba/model.py:68-99": "MMM Class Initialization and Attributes",
    "/model_example.py": "MMM Model Implementation Example",
    "/pyproject.toml": "Configuring MMM-Zeta with Poetry in Pyproject.toml",
    "/pyproject.toml:1-35": "Poetry Configuration for mmm-zeta",
    "/pyproject.toml:36-59": "Configuring Python Dev Tools in Pyproject.toml",
    "/requirements.txt": "Package Versions for Python Project",
    "/scripts/auto_tests_docs/auto_docs.py": "AutoDocs: OpenAI-powered Markdown Docs Generator",
    "/scripts/auto_tests_docs/auto_docs.py:1-41": "AI-Generated Markdown Docs from Code",
    "/scripts/auto_tests_docs/auto_docs.py:42-80": "Concurrent Class Documentation Generator",
    "/scripts/auto_tests_docs/auto_docs.py:81-85": "Checking Direct Execution and Calling Main Function",
    "/scripts/auto_tests_docs/auto_docs_functions.py": "Auto-Generating Markdown Docs for Functions with OpenAI",
    "/scripts/auto_tests_docs/auto_docs_functions.py:1-44": "Auto-Generate Markdown Docs with OpenAI",
    "/scripts/auto_tests_docs/auto_docs_functions.py:45-83": "Parallel Function Documentation Generator",
    "/scripts/auto_tests_docs/auto_tests.py": "Parallel OpenAI GPT-4 Tests and Docs Automation",
    "/scripts/auto_tests_docs/auto_tests.py:1-35": "Automate Tests and Docs with GPT-4",
    "/scripts/auto_tests_docs/auto_tests.py:109-109": "Main Function Called by Code",
    "/scripts/auto_tests_docs/auto_tests.py:36-67": "Markdown to Python Converter",
    "/scripts/auto_tests_docs/auto_tests.py:68-108": "Generate Test Files for Various Neural Network Classes",
    "/scripts/auto_tests_docs/auto_tests_functions.py": "Automated Testing and Documentation Generation",
    "/scripts/auto_tests_docs/auto_tests_functions.py:1-46": "Automated Documentation Generation with OpenAI",
    "/scripts/auto_tests_docs/auto_tests_functions.py:48-84": "Auto-generating Markdown Docs for Zeta.Utils Functions",
    "/scripts/auto_tests_docs/docs.py": "Python Test Docs & Functions",
    "/scripts/auto_tests_docs/docs.py:1-18": "Automatic Markdown Doc Generator",
    "/scripts/auto_tests_docs/docs.py:112-135": "Comprehensive Pytest Testing Guide",
    "/scripts/auto_tests_docs/docs.py:136-156": "Robust Python Testing: Parametrized, Mocks, Coverage",
    "/scripts/auto_tests_docs/docs.py:158-178": "Optimizing PyTest: Best Practices and Tips",
    "/scripts/auto_tests_docs/docs.py:179-201": "Effective Testing Guidelines",
    "/scripts/auto_tests_docs/docs.py:18-32": "Writing Effective Module Documentation",
    "/scripts/auto_tests_docs/docs.py:33-48": "Documentation Template for Modules/Functions",
    "/scripts/auto_tests_docs/docs.py:48-60": "Multi-Head Attention Module Creation",
    "/scripts/auto_tests_docs/docs.py:61-73": "Multi-Head Attention Forward Pass",
    "/scripts/auto_tests_docs/docs.py:74-83": "Multi-Head Attention Function Signature",
    "/scripts/auto_tests_docs/docs.py:83-112": "Test Writer SOP Prompt and MultiheadAttention Class",
    "/scripts/auto_tests_docs/mkdocs_handler.py": "Markdown File List Generator",
    "/scripts/auto_tests_docs/mkdocs_handler.py:1-27": "Generate MD File List",
    "/scripts/auto_tests_docs/mkdocs_handler.py:30-31": "Generate File List from Directory",
    "/scripts/code_quality.sh": "Automated Code Quality Enhancement",
    "/scripts/delpycache.py": "Delete PyCache Directories Script",
    "/scripts/get_package_requirements.py": "Extract Package Requirements",
    "/scripts/get_package_requirements.py:1-34": "Extract Package Requirements",
    "/scripts/get_package_requirements.py:35-47": "Fetch Package Versions",
    "/scripts/requirementstxt_to_pyproject.py": "Efficient Pyproject Updater",
    "/scripts/requirementstxt_to_pyproject.py:1-36": "Update Pyproject Dependencies",
    "/scripts/requirementstxt_to_pyproject.py:39-40": "Update pyproject.toml with Ease",
    "/scripts/test_name.sh": "Rename Python Tests with Prefix",
    "/scripts/tests.sh": "Automated Python Tests with scripts/tests.sh",
    "/tests/test_benchmarks.py": "Benchmarking MambaBlock and gpt4 Transformer",
    "/tests/test_benchmarks.py:1-40": "Benchmarking MambaBlock and GPT4 Transformer",
    "/tests/test_benchmarks.py:41-41": "Time Difference Calculator",
    "/tests/test_blocks.py": "MultiModal Mamba Block Testing",
    "/tests/test_blocks.py:1-42": "MultiModalMambaBlock Testing",
    "/tests/test_blocks.py:43-56": "Testing mmblock fusion methods",
    "/tests/test_model.py": "MMM Model Test Fixture",
    "/tests/test_model.py:1-46": "Testing MMM Model Initialization and Forward Pass",
    "/tests/test_model.py:49-84": "Testing MultiModal Mamba Model Fusion Methods"
}